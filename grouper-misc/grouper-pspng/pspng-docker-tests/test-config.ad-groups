_D=$(absolute_dir $(dirname "${BASH_SOURCE[0]}"))
. "$_D/test-config.defaults"
TEST_CONF=$_D/test-config-files

# This test runs against an ldap server outside of the docker system. 
# This variable must exist and point to a file with ldap connectivity
# named active_directory
# For example:
# ldap.active_directory.url = ldap://tfdc02.tfad.gatech.edu
# ldap.active_directory.ldapUrl = ldap://tfdc02.tfad.gatech.edu
# ldap.active_directory.bindDn = xyz@DOMAIN
# ldap.active_directory.bindCredential = 
# changeLog.consumer.pspng1.groupSearchBaseDn = ou=grouper-dev,dc=tfad,dc=gatech,dc=edu
# changeLog.consumer.pspng1.userSearchBaseDn = dc=tfad,dc=gatech,dc=edu
# 

export ALL_USER_FILTER="(&(objectclass=user)(!(objectclass=computer)))"
export USERNAME_ATTRIBUTE=samAccountName

# Make the SNAPSHOT_LDAP default to be no because AD directories are larger
export SNAPSHOT_LDAP="${SNAPSHOT_LDAP:-no}"

#
# This function is to output (to stdout) what grouper-loader.properties should be
# installed in the api/conf directory
function output_grouper_loader_properties() 
{
  log_always "Building grouper-loader.properties with ldap and ad-group  paragraphs"
  (cd $TEST_CONF; cat pspng-config-ldap.properties ${ACTIVE_DIRECTORY_LDAP_FILE} pspng-config-ad-groups.properties)
}

# This function helps share the validate_provisioning function
# across flat and bushy provisioning patterns (where CNs are different)
function get_cn_from_group_name()
{
  local USAGE="USAGE: get_cn_from_group_name <group>"

  local group="${1:?$USAGE}"

  awk -F: '{print $NF}' <<<"$group"
  #echo $group
}

# Read an ldap attribute from a given group
function get_ldap_group_attribute()
{
  local USAGE="USAGE: get_ldap_group_attribute <group> <attribute name>"

  [ $# -ne 2 ] && fail "$USAGE"

  local group="${1:?$USAGE}"
  local attribute_name="${2}"
  local group_cn=$(get_cn_from_group_name "$group")

  g_ldif=$(run_in_grouper_daemon myldapsearch-expandRangedResults -b "$LDAP_GROUP_BASE_DN" "(&(objectclass=group)(cn=$group_cn))" $attribute_name)
  assert_not_empty "$g_ldif" "Ldif of group $group_cn"

  #log_always "LDIF: $(tr \\n \| <<<"$g_ldif")"

  if [ "$attribute_name" = dn ]; then
    # we use run_in_grouper_daemon to avoid nuances of parent platform
    echo "$g_ldif" | run_in_grouper_daemon noAttributeLabels --show-dn
  else
    echo "$g_ldif" | run_in_grouper_daemon noAttributeLabels
  fi
}


function validate_deprovisioning()
{
  local USAGE="USAGE: validate_deprovisioning <group>"

  local group="${1:?$USAGE}"

  test_step "Checking that group doesn't exist: $group"

  local group_cn=$(get_cn_from_group_name "$group")
  local g_ldif=$(run_in_grouper_daemon myldapsearch -b "$LDAP_GROUP_BASE_DN" "(&(objectclass=group)(cn=$group_cn))" cn member)
  assert_empty "$g_ldif" "Ldif of group $group (expected to not exist)"
}


function validate_provisioning()
{
  local USAGE="USAGE: validate_provisioning <group> <correct members (comma-separated, alphabetical)>"

  local group="${1:?$USAGE}"
  local correct_members="${2:?$USAGE}"

  test_step "Checking provisioning: $group"
 
  local group_dn=$(get_ldap_group_attribute "$group" dn)

  assert_not_empty "$group_dn" "Group DN of $group"

  local uid_list=$(run_in_grouper_daemon bash -c "myldapsearch -b '$LDAP_USER_BASE_DN' 'memberof=$group_dn' samAccountName | noAttributeLabels")

  uid_list=$(sort <<<"$uid_list" | removeNewlines)

  assert_equal_lists "$correct_members" "$uid_list" "provisioning for group $group" 
}
  
function directly_remove_member()
{
  local USAGE="USAGE: directly_remove_member <group> <member>"

  local group="${1:?$USAGE}"
  local member="${2:?$USAGE}"

  test_step "Direct LDAP change: Removing $member from $group"
  g_dn=$(get_ldap_group_attribute "$group" dn)
  assert_not_empty "$g_dn" "Dn of group $group"


  local user_dn=$(run_in_grouper_daemon  bash -c "myldapsearch -b "$LDAP_USER_BASE_DN" samAccountName=$member dn | noAttributeLabels --show-dn")
  assert_not_empty "$user_dn" "Dn of user $member"

  local LDIF="dn: $g_dn
delete: member
member: $user_dn"

  run_in_grouper_daemon myldapmodify <<< "$LDIF"
}

function directly_add_member()
{
  local USAGE="USAGE: directly_add_member <group> <member>"

  local group="${1:?$USAGE}"
  local member="${2:?$USAGE}"

  test_step "Direct LDAP change: Adding $member from $group"
  g_dn=$(get_ldap_group_attribute "$group" dn)
  assert_not_empty "$g_dn" "Dn of group $group"


  local user_dn=$(run_in_grouper_daemon  bash -c "myldapsearch -b "$LDAP_USER_BASE_DN" samAccountName=$member dn | noAttributeLabels --show-dn")
  assert_not_empty "$user_dn" "Dn of user $member"

  local LDIF="dn: $g_dn
add: member
member: $user_dn"

  run_in_grouper_daemon myldapmodify <<< "$LDIF"
}


function pre_test()
{
  . get_ldap_properties_from_loader_properties

  GROUP_OU=$(run_in_grouper_daemon bash -c "myldapsearch -b "$LDAP_GROUP_BASE_DN" -s base dn | noAttributeLabels --show-dn")
  if [ -n "$GROUP_OU" ]; then
    log_always "PRETEST: Deleting $LDAP_GROUP_BASE_DN before starting test"
    run_in_grouper_daemon myldapdelete -rv "$LDAP_GROUP_BASE_DN"
  else
    log_always "PRETEST: Nothing to delete before starting test"
  fi
}
