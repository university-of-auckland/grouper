_D=$(absolute_dir $(dirname "${BASH_SOURCE[0]}"))
. "$_D/test-config.defaults"
TEST_CONF=$_D/test-config-files

#
# This function is to output (to stdout) what grouper-loader.properties should be
# installed in the api/conf directory
function output_grouper_loader_properties() 
{
  log_always "Building grouper-loader.properties with ldap and group-of-unique-names (goun)  paragraphs"
  (cd $TEST_CONF; cat pspng-config-ldap.properties pspng-config-goun.properties)
}

# This function helps share the validate_provisioning function
# across flat and bushy provisioning patterns (where CNs are different)
function get_cn_from_group_name()
{
  local USAGE="USAGE: get_cn_from_group_name <group>"

  local group="${1:?$USAGE}"

  awk -F: '{print $NF}' <<<"$group"
  #echo $group
}

# Read an ldap attribute from a given group
function get_ldap_group_attribute()
{
  local USAGE="USAGE: get_ldap_group_attribute <group> <attribute name>"

  [ $# -ne 2 ] && fail "$USAGE"

  local group="${1:?$USAGE}"
  local attribute_name="${2}"
  local group_cn=$(get_cn_from_group_name "$group")

  g_ldif=$(run_in_grouper_daemon myldapsearch -b dc=example,dc=edu "(&(objectclass=groupOfUniqueNames)(cn=$group_cn))" $attribute_name)
  assert_not_empty "$g_ldif" "Group expected group to exist: $group_cn"

  #log_always "LDIF: $(tr \\n \| <<<"$g_ldif")"

  if [ "$attribute_name" = dn ]; then
    # we use run_in_grouper_daemon to avoid nuances of parent platform
    echo "$g_ldif" | run_in_grouper_daemon noAttributeLabels --show-dn
  else
    echo "$g_ldif" | run_in_grouper_daemon noAttributeLabels
  fi
}


function validate_deprovisioning()
{
  local USAGE="USAGE: validate_deprovisioning <group>"

  local group="${1:?$USAGE}"

  test_step "Checking that group doesn't exist: $group"

  local group_cn=$(get_cn_from_group_name "$group")
  local g_ldif=$(run_in_grouper_daemon myldapsearch -b dc=example,dc=edu "(&(objectclass=groupOfUniqueNames)(cn=$group_cn))" cn uniquemember)
  assert_empty "$g_ldif" "Expected group $group to not exist, but it does: $g_ldif"
}


function validate_provisioning()
{
  local USAGE="USAGE: validate_provisioning <group> <correct members (comma-separated, alphabetical)>"

  local group="${1:?$USAGE}"
  local correct_members="${2:?$USAGE}"

  test_step "Checking provisioning: $group"

  log_always "Reading uniqueMember DNs from group: $group"
  local dn_list=$(get_ldap_group_attribute "$group" uniqueMember)

   log_always "DN memberships of groups:"
   sed 's/^/  /' <<<"$dn_list"

  local uid_list=""
  while read -u 12 dn; do
    log_always "Reading uid from $dn"
    local uid=$($DOCKER_COMPOSE_CMD exec -T grouper-daemon bash -c "myldapsearch -b '$dn' uid | noAttributeLabels")
    log_always "--> uid=$uid"

    if [ -z "$uid_list" ]; then
        uid_list="$uid"
    else
      # build a multi-line uid_list
      uid_list="$uid_list
$uid"
    fi

  done 12<<<"$dn_list" 

  uid_list=$(sort <<<"$uid_list" | removeNewlines)

  assert_equals "$correct_members" "$uid_list" "provisioning for group $group" 
}
  
function directly_remove_member()
{
  local USAGE="USAGE: directly_remove_member <group> <member>"

  local group="${1:?$USAGE}"
  local member="${2:?$USAGE}"

  test_step "Direct LDAP change: Removing $member from $group"
  g_dn=$(get_ldap_group_attribute "$group" dn)
  assert_not_empty "$g_dn" "Group expected to exist, but dn was empty: $group"


  local user_dn=$($DOCKER_COMPOSE_CMD exec -T grouper-daemon bash -c "myldapsearch -b dc=example,dc=edu uid=$member dn | noAttributeLabels --show-dn")
  assert_not_empty "$user_dn" "User expected to exist, but dn was empty: $member"

  local LDIF="dn: $g_dn
delete: uniqueMember
uniqueMember: $user_dn"

  run_in_grouper_daemon myldapmodify <<< "$LDIF"
}

function directly_add_member()
{
  local USAGE="USAGE: directly_add_member <group> <member>"

  local group="${1:?$USAGE}"
  local member="${2:?$USAGE}"

  test_step "Direct LDAP change: Adding $member from $group"
  g_dn=$(get_ldap_group_attribute "$group" dn)
  assert_not_empty "$g_dn" "Group expected to exist, but dn was empty: $group"


  local user_dn=$($DOCKER_COMPOSE_CMD exec -T grouper-daemon bash -c "myldapsearch -b dc=example,dc=edu uid=$member dn | noAttributeLabels --show-dn")
  assert_not_empty "$user_dn" "User expected to exist, but dn was empty: $member"

  local LDIF="dn: $g_dn
add: uniqueMember
uniqueMember: $user_dn"

  run_in_grouper_daemon myldapmodify <<< "$LDIF"
}


