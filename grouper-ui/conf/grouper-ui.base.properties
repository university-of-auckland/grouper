#
# Grouper UI configuration
# $Id: grouper.client.example.properties,v 1.24 2009-12-30 04:23:02 mchyzer Exp $
#

# The grouper UI proprties uses Grouper Configuration Overlays (documented on wiki)
# By default the configuration is read from grouper-ui.base.properties
# (which should not be edited), and the grouper-ui.properties overlays
# the base settings.  See the grouper-ui.base.properties for the possible
# settings that can be applied to the grouper-ui.properties


########################################
## Config chaining hierarchy
########################################

# comma separated config files that override each other (files on the right override the left)
# each should start with file: or classpath:
# e.g. classpath:grouper-ui.example.properties, file:c:/something/myconfig.properties
grouperUi.config.hierarchy = classpath:grouper-ui.base.properties, classpath:grouper-ui.properties

# seconds between checking to see if the config files are updated
grouperUi.config.secondsBetweenUpdateChecks = 60


###########################################
## Text bundles for UI
###########################################

# the default index
grouper.text.defaultBundleIndex = 0

# language for this bundle
grouper.text.bundle.0.language = en

# country for this bundle
grouper.text.bundle.0.country = us

# filename in the package grouperText that is before the .base.properties, and .properties
grouper.text.bundle.0.fileNamePrefix = grouperText/grouper.text.en.us


########################################

#### Simple Look and feel.  Note, the grouper-ui.properties will be checked first, then the media.properties.
#### Generally you will use the media.properties for things which need resource bundles for internationalization or
#### localization.  See the grouper-ui.properties for more options

## How to change logos and CSS

# You may specify a logo for your organisation and for Grouper. Off-the-shelf
# your organisation logo appears on the left of the header and the Grouper logo 
# appears on the right. Typically you would make the logos the same height. 
image.organisation-logo=grouperExternal/public/assets/images/organisation-logo.gif
image.grouper-logo=grouperExternal/public/assets/images/grouper.gif

# A space separated list of one or more .css files which are inserted into the 
# HEAD of all Grouper pages. The .css files are referenced in order and after
# any Grouper CSS files. This means that your CSS files can override any 
# Grouper style definition
css.additional=


#### Miscellaneous UI configuration

# Decide if the browser folder/group pane should auto-select
# the currently selected object in the view
# Note for Grouper 2.3.0 this should remain false until it is more stable.
uiV2.refresh.menu.on.view=false

# Specifies whether Grouper should display a logout link. Not all authentication
# schemes allow logout, including Basic authentication.
# This value can be set in the Grouper UI build.properties file
# Note that Grouper cannot guarantee that
#ending the session will log the user out of your authentication system!!!
#Only set to true if you can genuinely logout.
logout.link.show=true

# Specifies the maximum length for the subject String that appears in the subheader
# welcome message 
welcome.subject.max-length=80

#Set this to 'all' to remove all cookies, or set to a comma or space separated list of 
#cookie names to delete. Java code will do a Cookie.getName().equals or .matches
#so valid regular expressions may be used
logout.cookies-to-delete=none

# If logout should redirect to an external URL, put that URL here
grouperUi.logout.redirectToUrl = 

# When creating a group, which access privs will be granted to GrouperAll?
# groups.create.grant.all allows the UI to override the defaults in grouper.properties
#  =none if none should be checked in the UI
# If not set, the defaults from the grouper.properties file will be used
# NB in the QuickStart, no privs are automatically assigned - grouper.properties was 
# modified so that all 'groups.create.grant.all.<priv>' are false,
groups.create.grant.all=

# Unless otherwise configured, the UI starts browsing at the ROOTstem. set default.browse.stem
# to start browsing from a different stem.  You can override the default browse stem, 
# however, you must ensure that the stem exists by creating it using the Grouper API
default.browse.stem=


# Turn off the debug functionality (true/false)
# For production turn off (false) or restrict to a group
browser.debug.enable=false

# If debug is on then restrict to named group. Disable if group does not exist
browser.debug.group=

# Enables user to specify arbitrary exsecutable as HTML editor on the server
# Do not enable unless you absolutely trust users 
browser.debug.group.enable-html-editor=false

#If you want to save your debug preferences, set debug.prefs.dir to an existing directory 
#on you system, where the user Tomcat runs as, has write privilege
debug.prefs.dir=someDir/someWhereMustExist

#### Membership Import and export
## As of V1.2 the UI provides a framework for allowing users to export membership lists
## to flat files i.e. comma separated files, including in Excel compatible format. It is also
## possible to import simple delimited files.
## Both import and export require configuration and appropriate configuration will vary from 
## site to site. For this reason, the UI does not come pre-configued for import/export, however, 
## sample files are provided (see [Enabling import / export of group memberships|Customising the Grouper UI#import-export])

#membership-export.config=resources/grouper/membership-export.xml
#membership-import.config=resources/grouper/membership-import.xml

#for large files, give a temp dir so they arent stored in memory or the system temp dir
file.upload.temp.dir=
file.upload.max.bytes= 

#note: if they are in the this group, then they can use the lite ui too
require.group.for.logins=

#users must be in this group to be able to login to the lite membership update UI (if not in require.group.for.logins)
require.group.for.membershipUpdateLite.logins=

#users must be in this group to be able to login to the subjectPicker UI (if not in require.group.for.logins or require.group.for.membershipUpdateLite.logins)
require.group.for.subjectPicker.logins=

#users must be in this group to invite external users to grouper
require.group.for.inviteExternalSubjects.logins=

#users must be in this group to assign/create/etc attributes in the UI (new attribute framework) (if not in require.group.for.logins)
require.group.for.attributeUpdateLite.logins=

# if true, when a user logs in, a folder will be created and granted to the user if not already there
grouperUi.autoCreateUserFolderOnLogin=false

# you can set a folder for the user.  If the folder is not created then privileges will not be adjusted
# you can use EL here based on the subject, e.g. users:folders:${subject.id} or users:folders:${subject.getAttributeValue('netId')}
grouperUi.autoCreateUserFolderName=

# if the folders are leaves in the tree, this can be false, if you need to create parents, set to true (be careful)
grouperUi.autoCreateUserFolderCreateParentFoldersIfNotExist = false

#### Displaying lists

# When browsing or searching the UI will present lists of various objects. The following settings
# allow sites to control default page sizes and a list of user-selectable page sizes
pager.pagesize.default=50
pager.pagesize.selection=10 25 50 100

# If we should remove paging from subject search since we cant *really* page through all subjects,
# you would just be paging through the first part of the first page.  IF you set this to true
# then you might want to bump up the default pagesize...
pager.removeFromSubjectSearch=false

# Typically, when browsing it is sufficient to show the extension/displayExtension for a group/stem
# as the parent stems are aleady shown and are common. When searching, however, this context is lost
# so sites can configure which field to display in the context of a search where results may come from
# different locations
search.group.result-field=displayName
search.stem.result-field=displayName

# By setting the 'result-field-choice' properties, sites can alow users to select which
# field to use for displaying serach resuts
search.group.result-field-choice=displayName displayExtension name
search.stem.result-field-choice=displayName displayExtension name

# Prior to V1.2 sites could do little to control how subjects, groups or stems were displayed
# in the UI, beyond the display of stem/group search results, unless they created dynamic tiles
# It is now possible to control the display of stems, groups and subjects in different contexts
# In the case of subjects, an attribute can be configured based on the subject's SourceAdapter

# Provides backwards compatability - it was assumed that all Subjects woud have a 'description' attribute  
subject.display.default=description

# Used for groups when displayed as a subject i.e. when displayed as member of another group
subject.display.g\:gsa=displayExtension

# Used for groups when displayed as a subject i.e. when displayed as member of another group
subject.display.grouperEntities=displayExtension

# Used for internal Grouper subjects i.e. GrouperAll and GrouperSystem
subject.display.g\:isa=name

# Default attribute to display for groups
group.display=displayExtension

# Attribute to use when browsing and the user has selected to hide the hierarchy - 
# thus losing context
group.display.flat=displayName

# Default attribute for stems
stem.display=displayExtension

#### Searching

# Configuration affecting how simple default group/stem searches are carried out

# Determines if the name or extension field (or neither) are searched  
search.default.search-in-name-or-extension=

# Determines if the display name or display extension (or neither) is searched
search.default.search-in-display-name-or-extension=name

# On the advanced groups search screen determines how many search fields are displayed
search.max-fields=5

# On the advanced groups search screen determines how many group type select lists are displayed
search.max-group-types=3

# On the advanced stems search screen determines how many search fields are displayed
search.stems.max-fields=4

# Control whether default search can search any attribute. Valid values=only or true or false
search.default.any=false

# Control default search option
search.default=name

# dojo autocompletion for add member/add groups does a wildcard search
# for every character typed. If defined, only allow this for certain
# forms. If undefined, allow for all of them
#uiV2.search.autocompleteById.allowedPaths = /UiV2Subject.addToGroupFilter, /UiV2Stem.createGroupParentFolderFilter, /UiV2Group.addMemberFilter
#uiV2.search.autocompleteSearch.allowedPaths = /UiV2Subject.addToGroupFilter, /UiV2Stem.createGroupParentFolderFilter, /UiV2Group.addMemberFilter

# Allow filtering of membership lists by subject source
members.filter.by-source=true
members.filter.limit=500

# Displays source specific form elements using keys:
# subject.search.form-fragment.<sourceId>
subject.search.form-fragment.g\:gsa=subjectSearchGroupFragmentDef

#### Sorting
## As of V1.2 the Grouper UI allows sorting of various lists of objects
## See [Sort order of lists|Customising the Grouper UI#sort] for explanation
comparator.impl=edu.internet2.middleware.grouper.ui.DefaultComparatorImpl
comparator.helper.edu.internet2.middleware.grouper.Group=edu.internet2.middleware.grouper.ui.GroupComparatorHelper
comparator.helper.edu.internet2.middleware.grouper.ui.util.GroupAsMap=edu.internet2.middleware.grouper.ui.GroupComparatorHelper
comparator.helper.edu.internet2.middleware.grouper.Stem=edu.internet2.middleware.grouper.ui.StemComparatorHelper
comparator.helper.edu.internet2.middleware.grouper.ui.util.StemAsMap=edu.internet2.middleware.grouper.ui.StemComparatorHelper
comparator.helper.edu.internet2.middleware.subject.Subject=edu.internet2.middleware.grouper.ui.SubjectComparatorHelper
comparator.helper.edu.internet2.middleware.grouper.ui.util.SubjectAsMap=edu.internet2.middleware.grouper.ui.SubjectComparatorHelper
comparator.helper.edu.internet2.middleware.grouper.Member=edu.internet2.middleware.grouper.ui.SubjectComparatorHelper
comparator.helper.edu.internet2.middleware.grouper.Membership=edu.internet2.middleware.grouper.ui.SubjectComparatorHelper
comparator.helper.edu.internet2.middleware.grouper.ui.util.MembershipAsMap=edu.internet2.middleware.grouper.ui.SubjectComparatorHelper
comparator.helper.edu.internet2.middleware.grouper.ui.util.SubjectPrivilegeAsMap=edu.internet2.middleware.grouper.ui.GroupOrStemComparatorHelper
comparator.helper.edu.internet2.middleware.grouper.Composite=edu.internet2.middleware.grouper.ui.ComositeComparatorHelper
comparator.helper.edu.internet2.middleware.grouper.ui.util.CompositeAsMap=edu.internet2.middleware.grouper.ui.CompositeComparatorHelper


# Sorting large lists can be computationally expensive - and slow. Use this property to turn off sorting for 
# large lists
comparator.sort.limit=200

# SubjectSummary page lists full names - so sort on those by default
group.sort.subjectSummary=displayName
stem.sort.subjectSumamry=displayName


## To control the order in which subject attributes are listed on the Subject Summary page:
# subject.attributes.order.<SOURCE_ID>=comma separated list of case sensitive attribute names
subject.attributes.order.g\:gsa=displayExtension,displayName,name,alternateName,extension,createTime,createSubjectId,createSubjectType,modifySubjectId,modifySubjectType,modifyTime,subjectType,id
subject.attributes.order.qsuob=LFNAME,LOGINID,subjectType,id

## To control the order in which subject attributes are listed in the New UI without expanding the attribute list.
subject2.attributes.order.nonexpanded.default=subjectId,email,name,description

# Override for each source
subject2.attributes.order.nonexpanded.g\:isa=subjectId,name,description
# subject2.attributes.order.nonexpanded.jdbc=subjectId,email,name,description

## To control the order in which subject attributes are listed in the New UI in the expanded results
# Leave empty to display all subject attributes (excluding name, description, email and subject id)
#subject2.attributes.order.expanded.default=lfname,loginid,memberId,sourceId,sourceName

# Override for each source
# subject2.attributes.order.expanded.jdbc=lfname,loginid


#### Member sorting and searching
# Whether to enable member sorting using sort attributes stored in Grouper.
member.sort.enabled=true

# Whether to use default sorting only and not allow users to specify which sort attribute to use.
member.sort.defaultOnly=false

# Whether to enable member searching using search attributes stored in Grouper.
member.search.enabled=true


#### Audit query
## Date format likely to be locale dependent + may need to turn on/off
audit.query.enabled=true
  
#SimpleDateFormat format strings
audit.query.date-format=MM/dd/yyyy
audit.query.display-date-format=dd MMM yyyy HH:mm:ss 

#If no date specified show results for audit.query.default-since days
audit.query.default-since=7


### Misc

# give more info about what is not serializable in the session
debugSessionSerialization = false

#### Infodots
#if the little yellow "i" images that show help should be enabled
infodot.enable=true

#############################
## Subject settings
#############################

subject.maxChars = 100

# v2 max chars on subject before abbreviated
subject2.maxChars = 40

#############################
## Security settings
#############################

# if you want to have the username in http header, put the head name here, e.g. REMOTE_USER
grouper.ui.authentication.http.header =

# comma separated source ids that the authenticating user must be in to authenticate (if blank accept all)
grouper.ui.authentication.sourceIds = 


#############################
## Membership settings
#############################

#### Lite UI settings
#can be subjectId, sourceId, name, description, screenLabel, memberId, or attribute name which is single valued
#comma separated.  will be sorted by sourceId, then the sort field (recommended to be screenName)
simpleMembershipUpdate.exportAllSubjectFields=sourceId, screenLabel, entityId, name, description
simpleMembershipUpdate.exportAllSortField=screenLabel
simpleMembershipUpdate.groupComboboxResultSize=200
simpleMembershipUpdate.filterComboMinChars=3
simpleMembershipUpdate.filterMaxSearchSubjects=1000
#max subjects in drop down
simpleMembershipUpdate.subjectComboboxResultSize=250

#add an extra css to the simple membership update.  use relative or absolute urls, comma separated
simpleMembershipUpdate.extraCss = 

#properties file via url to look for text first (before nav.properties)
simpleMembershipUpdate.textFromUrl = 

#directory for skin files, if putting config files on file system and not classpath, then put the files here
simpleMembershipUpdate.confDir = 

#if by default the screen will delete multiple
#(screen is easier to use but takes longer potentially and defaults to false)
simpleMembershipUpdate.defaultDeleteMultiple=false

#if by default the screen will show the import by file instead of direct textarea input
#this defaults to true which helps with large imports, there might be memory problem with textarea import
simpleMembershipUpdate.defaultImportFile=true

#if we should allow external URL properties in group attribute: grouperGroupMshipSettingsUrl
simpleMembershipUpdate.allowExternalUrlProperties=true

#if allowing external text by url, this is the filter to strip invalid html tags.  blank for none
simpleMembershipUpdate.externalUrlTextProperties.grouperHtmlFilter = edu.internet2.middleware.grouper.util.GrouperHtmlFilter

#if the breadcrumb row should show on the screen by default
simpleMembershipUpdate.showBreadcrumbRowByDefault=true

#if the name row should show on the screen by default
simpleMembershipUpdate.showNameRowByDefault=true

#if the path row should show on the screen by default
simpleMembershipUpdate.showPathRowByDefault=true

#if the description row should show on the screen by default
simpleMembershipUpdate.showDescriptionRowByDefault=true

#if the id row should show on the screen by default
simpleMembershipUpdate.showIdRowByDefault=false

#if the id path row should show on the screen by default
simpleMembershipUpdate.showIdPathRowByDefault=false

#if the alternate id path row should show on the screen by default
simpleMembershipUpdate.showAlternateIdPathRowByDefault=false

#if the uuid row should show on the screen by default
simpleMembershipUpdate.showUuidRowByDefault=false

#if results must be in a certain group, or blank for no check.  e.g. must be in employee group
simpleMembershipUpdate.subjectSearchRequireGroup = 

#if results must be in certain sources, or blank for no check.  e.g. must be in the person sources, comma separated
simpleMembershipUpdate.subjectSearchRequireSources = 

# customizer class to customize common things (extend GrouperUiCustomizer)
grouperUiCustomizerClassname = 

# kill all cookies with these prefixes on logout (comma separated)
grouperUi.logout.cookie.prefix = 

# this configures  how subjects look in the UI v2.2.  This is the short version of the subject
grouperUi.screenLabel2.sourceId.0 = jdbc
grouperUi.screenLabel2.screenEl.0 = ${subject.name}

grouperUi.screenLabel2.sourceId.1 = g:gsa
grouperUi.screenLabel2.screenEl.1 = ${subject.getAttributeValue('displayExtension')}

grouperUi.screenLabel2.sourceId.2 = g:rsa
grouperUi.screenLabel2.screenEl.2 = ${subject.getAttributeValue('displayExtension')}

grouperUi.screenLabel2.sourceId.3 = grouperEntities
grouperUi.screenLabel2.screenEl.3 = ${subject.getAttributeValue('displayExtension')}


# Custom subject icons for V2 new UI - optionally set a different icon based on the subject id
#
# Override the default user icon for a specific source ID. Subjects can continue
# to be defined until a break in the numeric sequence of the sourceId value
#
# Note: Changes to g:gsa, g:isa, and grouperEntities are currently ineffective

grouperUi.screenSubjectIcon2.screenHtmlEl.default = ${'<i class="fa fa-user"></i> '}

#grouperUi.screenSubjectIcon2.sourceId.0 = subjectSourceA
#grouperUi.screenSubjectIcon2.screenHtmlEl.0 = ${'<i class="fa fa-flag"></i> '}
#
#grouperUi.screenSubjectIcon2.sourceId.1 = subjectSourceB
#grouperUi.screenSubjectIcon2.screenHtmlEl.1 = ${'<i class="fa fa-medkit"></i> '}
#
#grouperUi.screenSubjectIcon2.sourceId.2 = subjectSourceC
#grouperUi.screenSubjectIcon2.screenHtmlEl.3 = ${'<i class="fa fa-desktop"></i> ' }



# this configures how subjects look in the lite UI.  This is the short version of the display
# images (must be in assets/images dir) for subject source id
grouperUi.subjectImg.sourceId.0 = pennperson
grouperUi.subjectImg.image.0 = user.png
# screen EL has "subject" as an object
grouperUi.subjectImg.screenEl.0 = ${subject.description}

grouperUi.subjectImg.sourceId.1 = jdbc
grouperUi.subjectImg.image.1 = user.png
grouperUi.subjectImg.screenEl.1 = ${subject.description}

grouperUi.subjectImg.sourceId.2 = g:gsa
grouperUi.subjectImg.image.2 = group.png
grouperUi.subjectImg.screenEl.2 = ${subject.getAttributeValue('displayExtension')}
grouperUi.subjectImg.textId.2 = gsa

grouperUi.subjectImg.sourceId.3 = g:isa
grouperUi.subjectImg.image.3 = application.png
grouperUi.subjectImg.screenEl.3 = 
grouperUi.subjectImg.textId.3 = isa

grouperUi.subjectImg.sourceId.4 = grouperExternal
grouperUi.subjectImg.image.4 = user_red.png
grouperUi.subjectImg.screenEl.4 = ${subject.description}

#this source doesnt really exist, but it is the image for roles as opposed to groups
grouperUi.subjectImg.sourceId.5 = g:rsa
grouperUi.subjectImg.image.5 = group_key.png
grouperUi.subjectImg.screenEl.5 = ${subject.getAttributeValue('displayExtension')}
grouperUi.subjectImg.textId.5 = rsa


#this source doesnt really exist, but it is the image for roles as opposed to groups
grouperUi.subjectImg.sourceId.6 = grouperEntities
grouperUi.subjectImg.image.6 = application.png
grouperUi.subjectImg.screenEl.6 = ${subject.getAttributeValue('displayExtension')}

# in parts of the UI where there is a long display, this is the long display
grouperUi.subjectImgLong.sourceId.0 = g:gsa
grouperUi.subjectImgLong.image.0 = group.png
grouperUi.subjectImgLong.screenEl.0 = ${subject.getAttributeValue('displayName')}

grouperUi.subjectImgLong.sourceId.1 = g:rsa
grouperUi.subjectImgLong.image.1 = group_key.png
grouperUi.subjectImgLong.screenEl.1 = ${subject.getAttributeValue('displayName')}

grouperUi.subjectImgLong.sourceId.2 = grouperEntities
grouperUi.subjectImgLong.image.2 = application.png
grouperUi.subjectImgLong.screenEl.2 = ${subject.getAttributeValue('displayName')}



grouperUi.logHtmlDir = 
grouperUi.logHtml = false

#if comma separated email addresses are here, then errors will trigger emails (ui-lite)
errorMailAddresses = 

##################################
## Subject picker
##################################

# if putting config files on file system and not classpath, then put the files here
subjectPicker.confDir = c:/temp/subjectPicker


## subject picker config defaults

# if the subject should be sent back to the calling page in javascript object
subjectPicker.defaultSettings.sendSubjectJsonToCallback = true

#comma separated css urls (relative or absolute) for skinning this subject picker
subjectPicker.defaultSettings.extraCss =

# when the subject object is sent in Javascript to the caller, which fields or attributes should be sent
subjectPicker.defaultSettings.subjectObject.include.subjectId = true
subjectPicker.defaultSettings.subjectObject.include.sourceId = true
subjectPicker.defaultSettings.subjectObject.include.name = true
subjectPicker.defaultSettings.subjectObject.include.typeName = true
subjectPicker.defaultSettings.subjectObject.include.description = true
#comma separated list of subject attirbutes or INCLUDE_ALL_ATTRIBUTES for all
#subjectObject.include.attributes = loginid,lfname
#subjectObject.include.attributes = INCLUDE_ALL_ATTRIBUTES
subjectPicker.defaultSettings.subjectObject.include.attributes = 

# put sourceIds to search in, or leave blank for all
subjectPicker.defaultSettings.searchInSourceIds = 

## You can configure per source how the subjects appear on screen, and customize per subject picker instance as well
# Increment the index (0, 1, 2, etc) to configure multiple sources
#source id we are configuring
subjectPicker.defaultSettings.sourceProperties.sourceId.0 = 
#this is the expression language of how the subject result should appear on screen
subjectPicker.defaultSettings.sourceProperties.subjectElForSource.0 = 

# max results that can be retrieved before the group filter resultsMustBeInGroup is applied
subjectPicker.defaultSettings.maxSubjectsResultsBeforeGroupSearch = 800

# max results that can be retrieved
subjectPicker.defaultSettings.maxSubjectsResults = 200

#if results must be in group, or blank for no check.  e.g. put your active employee group here
subjectPicker.defaultSettings.resultsMustBeInGroup = 

#if the resource is far down the folder structure, you can remove part of it
subjectPicker.defaultSettings.removePrefixOnUi = 

# is an actas should be applied for group operations.  Generally this is GrouperSystem, though could be anyone, or blank
# to act as the logged in user
subjectPicker.defaultSettings.actAsSourceId = g:isa
subjectPicker.defaultSettings.actAsSubjectId = GrouperSystem

# put a URL here where the result (subjectId, sourceId, name, description) will be submitted back
# blank if same domain and just call opener directly
subjectPicker.defaultSettings.submitResultToUrl =

##################################
## Attribute def name picker
##################################

# if putting config files on file system and not classpath, then put the files here
attributeDefNamePicker.confDir = 


## attributeDefName picker config defaults

#comma separated css urls (relative or absolute) for skinning this attributeDefName picker
attributeDefNamePicker.defaultSettings.extraCss =

# names of attribute defs where the attribute def names should be searched from
attributeDefNamePicker.defaultSettings.searchInAttributeDefNames = 

## You can configure per source how the attributeDefNames appear on screen, and customize per attributeDefName picker instance as well
#this is the expression language of how the attributeDefName result should appear on screen
attributeDefNamePicker.defaultSettings.attributeDefNameNameEl = 

# max results that can be retrieved
attributeDefNamePicker.defaultSettings.maxAttributeDefNamesResults = 200

# is an actas should be applied for group operations.  Generally this is GrouperSystem, though could be anyone, or blank
# to act as the logged in user
attributeDefNamePicker.defaultSettings.actAsSourceId = g:isa
attributeDefNamePicker.defaultSettings.actAsSubjectId = GrouperSystem

# put a URL here where the result (attributeDefNameId, displayName, name, description) will be submitted back
# blank if same domain and just call opener directly
attributeDefNamePicker.defaultSettings.submitResultToUrl =

##################################
## v2.2 UI index
##################################

# generally the number of objects in each section
uiV2.index.numberOfObjectsInSectionDefault = 10

# number of groups, stems, etc on index page to show for favorites.  Note, e.g. if this is 5, show 5 max of each
uiV2.index.maxFavoritesEachType = 5

# number of groups, stems, etc on index page to show for recently used.  Note, e.g. if this is 5, show 5 max of each
uiV2.index.maxRecentlyUsedEachType = 5

# number of millis that widget queries must complete in before they are abandoned and the user must click a link to display it
# -1 means dont run in threads, and just draw the screen no matter how long it takes.  0 means, dont even try to load the widgets,
# let the user do it themselves
uiV2.index.widgetMaxQueryMillis = 5000

# if you are testing the widgets, put a sleep there
# max widget millis must elapse before the JSP displays
uiV2.index.test.sleepIn.recentlyUsed.widgetMillis = 0
uiV2.index.test.sleepIn.myFavorites.widgetMillis = 0
uiV2.index.test.sleepIn.groupsImanage.widgetMillis = 0
uiV2.index.test.sleepIn.stemsImanage.widgetMillis = 0
uiV2.index.test.sleepIn.myMemberships.widgetMillis = 0
uiV2.index.test.sleepIn.myServices.widgetMillis = 0

##################################
## External subjects invitation
##################################

# if the registration screen is enabled
externalMembers.enabledRegistration = false

#if admins should be emailed after each action, put comma separated addresses here
externalMembers.emailAdminsAddressesAfterActions = 

#if you want to allow users to delete their record
externalMembers.allowSelfDelete = false

##################################
## Invite external members
##################################

inviteExternalMembers.groupComboboxResultSize = 200

# if the wheel group is allowed to be invited
inviteExternalMembers.allowWheelInInvite = false

# if the invitation screen is enabled
inviteExternalMembers.enableInvitation = false

#if link from new UI
inviteExternalPeople.link-from-new-ui = false

#if admins should be emailed after each action, put comma separated addresses here
inviteExternalMembers.emailAdminsAddressesAfterActions = 

#if we should allow invite by identifier
inviteExternalMembers.allowInviteByIdentifier = false

###################################
## Simple permission update
###################################

#max size for combobox when filtering attribute defs for permissions
simplePermissionUpdate.attributeDefComboboxResultSize = 200

#max size for combobox when filtering permission resources
simplePermissionUpdate.permissionResourceComboboxResultSize = 200

#max users in combobox when filtering
simplePermissionUpdate.subjectComboboxResultSize = 50

#number of rows to repeat headers on permissions screen
simplePermissionUpdate.repeatPermissionHeaderAfterRows = 20

#max chars in subject listing in permissions screen
simplePermissionUpdate.maxOwnerSubjectChars = 50

#if we shouldnt have groups in the subject results
simplePermissionUpdate.allowGroupsInSubjectResults = false

###################################
## Simple attribute update
###################################

#max size for combobox when filtering attribute defs to edit
simpleAttributeUpdate.attributeDefComboboxResultSize = 200

#repeat the header of which privilege is which every X rows
simpleAttributeUpdate.repeatPrivilegeHeaderAfterRows = 20

#max size for combobox when filtering privilege users to add
simpleAttributeUpdate.attributeDefPrivilegeUserComboboxResultSize = 200

#max size for combobox for search for members in assignment
simpleAttributeUpdate.memberComboboxResultSize = 200

#when showing assignments, this is the max number of chars before ellipses, -1 for no ellipses
simpleAttributeUpdate.maxOwnerSubjectChars = 50

###################################
## Simple attribute name
###################################

#max size for combobox when filtering attribute def names to edit
simpleAttributeNameUpdate.attributeDefNameComboboxResultSize = 200

###################################
## Groups
###################################

#max size for combobox when filtering groups to edit
simpleGroupUpdate.groupComboboxResultSize = 200

#max size for entity drop down in group privilege screen
simpleGroupUpdate.groupPrivilegeUserComboboxResultSize = 200

###################################
## Directed graphs
###################################

directedGraph.width = 1000
directedGraph.height = 600

###################################
## Internationalization
###################################

# this should be false, and make sure URIEncoding is set to UTF-8 in the tomcat connector
# <Connector URIEncoding="UTF-8" ... 
convertInputToUtf8 = false

###################################
## V2 UI index page settings
###################################

# support doc link to local website
uiV2.supportDocLink = https://spaces.internet2.edu/display/Grouper/Grouper+Wiki+Home

# number of folders on index page
uiV2.treeStemsOnIndexPage = 30

# number of groups on index page
uiV2.treeGroupsOnIndexPage = 30

# what defaults in widget cols (0,1,2): [IndexContainer.IndexPanel enum]: 
# GroupsImanage, MyFavorites, MyMemberships, MyServices, RecentlyUsed, StemsImanage
uiV2.widget0 = MyFavorites
uiV2.widget1 = GroupsImanage
uiV2.widget2 = MyServices

###################################
## V2 UI subject settings
###################################

# number of folders on index page
uiV2.subjectSearchResults = 30

###################################
## V2 UI stem settings
###################################

# number of folders in combobox
uiV2.stemComboboxResultSize = 200

# number of attribute defs in combobox
uiV2.attributeDefsComboboxResultSize = 200

# number of attribute def names in combobox
uiV2.attributeDefNamesComboboxResultSize = 200

# number of permission actions in combobox
uiV2.permissionActionsComboboxResultSize = 200

###################################
## V2 UI privilege inheritance settings
###################################

# if this is true, users do not need to be able to read/update rules attribute definitions to be able to read/update inherited privileges rules
uiV2.privilegeInheritanceDoesntRequireRulesPrivileges = true

# require admin (GrouperSysAdmin or wheel group) to update inherited privileges
uiV2.privilegeInheritanceUpdateRequireAdmin = false

# require admin (GrouperSysAdmin or wheel group) to read inherited privileges
uiV2.privilegeInheritanceReadRequireAdmin = false

# require admin (GrouperSysAdmin or wheel group) to update inherited privileges
uiV2.privilegeInheritanceUpdateRequireGroup = 

# require admin (GrouperSysAdmin or wheel group) to read inherited privileges
uiV2.privilegeInheritanceReadRequireGroup = 

# if show miscellaneous link
uiV2.showMiscellaneousLink = true

# if show global inherited privileges link
uiV2.showGlobalInheritedPrivilegesLink = true

# when unassigning inherited privileges from folders, it will remove the underlying privileges unless specified in another rule
uiV2.grouperRule.removeInheritedPrivileges.whenUnassigned = true

# it will revoke privileges in sub objects as root, if you want it to act as the current logged in subject, do this in grouper-ui.properties:
uiV2.grouperRule.removeInheritedPrivileges.asRoot = true


###################################
## V2 UI attributeDef settings
###################################

# number of folders in combobox
uiV2.attributeDefComboboxResultSize = 200


###################################
## V2 UI group settings
###################################

# number of groups in combobox
uiV2.groupComboboxResultSize = 200

# fields in the group export all, and sort field
uiV2.group.exportAllSubjectFields=sourceId, screenLabel, entityId, name, description
uiv2.group.exportAllSortField=screenLabel

# Show composite owners and factors without clicking on 'More'
uiV2.group.show.compositeAndFactors=true

# allow group admins to refresh loader groups
uiV2.group.allowGroupAdminsToRefreshLoaderJobs=true

# if results must be in certain sources, or blank for no check.  e.g. must be in the person sources, comma separated
uiV2.subjectSearchRequireSources = 

# if someone types in a subject ID or identifier, should that search all subjects?  if so then blank
uiV2.subjectLookupRequireSources = 


###################################
## V2 UI provisioning settings
###################################

# put in a group here if you want to restrict the provisioning tab to certin users.  
# note, admins can always see the tab
uiV2.provisioning.must.be.in.group=


###################################
## V2 UI loader settings
###################################

# put in a group here if you want to restrict the loader tab to certin users.  
# note, admins can always see the tab
uiV2.loader.must.be.in.group =

# put a group here if you want these users to be able to edit loader jobs
uiV2.loader.edit.if.in.group = 

# if group admins can see the loader tab
uiV2.loader.view.by.group.admins = true

# how many logs to display on screen
uiV2.loader.logs.maxSize = 400
# max that a user could specify
uiV2.loader.logs.maxMaxSize = 5000

###################################
## V2 UI instrumentation settings
###################################

# should show instrumentation?
uiV2.admin.instrumentation.show = true

# restrict access based on this group, by default only admins can see
# note, admins can always see the screen
uiV2.admin.instrumentation.must.be.in.group =

###################################
## V2 UI daemon jobs settings
###################################

# should show daemon jobs?
uiV2.admin.daemonJobs.show = true

# restrict access based on this group, by default only admins can see
# note, admins can always see the screen
uiV2.admin.daemonJobs.must.be.in.group =

# how often to refresh the page (in seconds)
uiV2.admin.daemonJobs.refreshInterval = 30

###################################
## V2 UI admin settings
###################################

# should show subject api diagnostics?
uiV2.admin.subjectApiDiagnostics.show = true

# put in a group here if you want to allow the subject API diagnostics to certin users.  
# note, admins can always see the screen
uiV2.admin.subjectApiDiagnostics.must.be.in.group =

#######################################
############## New service template
#######################################

## use capturing group from regex as the key in the dropdown. eg: service for the below string
grouper.template.service.logicClass=edu.internet2.middleware.grouper.grouperUi.beans.ui.GrouperNewServiceTemplateLogic

grouper.template.tierStructure.logicClass=edu.internet2.middleware.grouper.grouperUi.beans.ui.GrouperTierStructureLogic
